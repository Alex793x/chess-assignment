spring:
  application:
    name: chess-backend

  rsocket:
    server:
      transport: websocket
      mapping-path: /rsocket

  kafka:
    bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS:}
    properties:
      concurrency-value: ${CONCURRENCY_VALUE:1}
      security:
        protocol: ${KAFKA_SECURITY_PROTOCOL:}
      sasl:
        jaas:
          config: ${KAFKA_SECURITY_CONFIG:}
        mechanism: ${KAFKA_MECHANISM:}

      session:
        timeout:
          ms: 45000
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer
    consumer:
      auto-offset-reset: latest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      group-id: chess-backend

  security:
    oauth2:
      resourceserver:
        jwt:
          issuer-uri: https://authenticate.intellioptima.com/auth/realms/IntelliOptima

  data:
    mongodb:
      database: ${MONGO_DB_DATABASE}

openai:
    api:
      key: ${OPENAI_API_KEY}

mongo:
  db:
    user: ${MONGO_DB_USER}
    password: ${MONGO_DB_PASSWORD}