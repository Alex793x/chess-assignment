package chess.engine.move_generation;

import chess.board.Board;
import chess.board.enums.PieceType;
import chess.board.enums.PieceColor;
import chess.engine.pre_computations.PreComputationHandler;

import java.util.ArrayList;
import java.util.List;

public class MoveGenerator {
    private final Board board;

    public MoveGenerator(Board board) {
        this.board = board;
    }

    /**
     * Generates all valid moves for a king from a specified square.
     * This method utilizes precomputed attack paths to efficiently determine
     * valid moves considering both the layout of the board and the rules governing
     * king movement.
     *
     * @param square the starting square index of the king, ranging from 0 (a1) to 63 (h8).
     * @param color the color of the king (PieceColor.WHITE or PieceColor.BLACK).
     * @return a list of integers, each representing a valid destination square index.
     */
    public List<Integer> generateMovesForKing(int square, PieceColor color) {
        List<Integer> moves = new ArrayList<>();
        long possibleMoves = PreComputationHandler.KING_ATTACKS[square];
        long occupancies = board.getBitboard().getOccupancies(color);

        System.out.println("King Attacks Bitboard for " + square + ": " + Long.toBinaryString(possibleMoves));
        System.out.println("Occupancies for " + color + ": " + Long.toBinaryString(occupancies));

        for (int toSquare = 0; toSquare < 64; toSquare++) {
            // Check if the move is within the precomputed moves
            if ((possibleMoves & (1L << toSquare)) != 0) {
                // Ensure the target square is not occupied by the same color piece
                if ((occupancies & (1L << toSquare)) == 0) {
                    moves.add(toSquare);
                }
            }
        }

        // A printout of all the available moves
        System.out.println("Generated moves: " + moves);
        return moves;
    }

    /**
     * Moves the king from one square to another if the move is valid.
     * This method first checks if the intended move is within the list of valid moves
     * generated by `generateMovesForKing`. If the move is valid, it updates the board
     * state by moving the king to the new square. If the move is not valid, it throws
     * an exception.
     *
     * @param fromSquare the current square index of the king.
     * @param toSquare the target square index to move the king to.
     * @param color the color of the king (PieceColor.WHITE or PieceColor.BLACK).
     * @throws Exception if the move is not valid, with a message explaining why.
     */
    public void moveKing(int fromSquare, int toSquare, PieceColor color) throws Exception {
        List<Integer> validMoves = generateMovesForKing(fromSquare, color);

        if (validMoves.contains(toSquare)) {
            // Perform the move on the board
            board.getBitboard().removePieceFromSquare(fromSquare, PieceType.KING, color);
            board.getBitboard().placePieceOnSquare(toSquare, PieceType.KING, color);
            System.out.println("Move successful: King moved from " + fromSquare + " to " + toSquare);
        } else {
            // If the move is not valid, throw an exception detailing the issue
            throw new Exception("Invalid move: King cannot move from " + fromSquare + " to " + toSquare);
        }
    }


    // PAWN MOVE GENERATION


    public List<Integer> generateMovesForPawn(int square, PieceColor color) {
        List<Integer> moves = new ArrayList<>();
        long allOccupancies = board.getBitboard().getOccupancies(PieceColor.WHITE) | board.getBitboard().getOccupancies(PieceColor.BLACK);
        long enemyOccupancies = board.getBitboard().getOccupancies(color == PieceColor.WHITE ? PieceColor.BLACK : PieceColor.WHITE);

        int direction = color == PieceColor.WHITE ? 1 : -1;
        int startRow = color == PieceColor.WHITE ? 1 : 6;
        int oneStepForward = square + 8 * direction;
        int twoStepsForward = square + 16 * direction;
        int leftCapture = square + 7 * direction;
        int rightCapture = square + 9 * direction;

        // Check forward move
        if (isSquareEmpty(oneStepForward, allOccupancies)) {
            moves.add(oneStepForward);

            // Check if two-step forward move is possible
            if ((color == PieceColor.WHITE && (square / 8) == 1) ||
                    (color == PieceColor.BLACK && (square / 8) == 6)) {
                if (isSquareEmpty(twoStepsForward, allOccupancies)) {
                    moves.add(twoStepsForward);
                }
            }
        }

        // Check captures
        if (isWithinBoardBounds(leftCapture) &&
                isSquareOccupiedByEnemy(leftCapture, enemyOccupancies)) {
            moves.add(leftCapture);
        }
        if (isWithinBoardBounds(rightCapture) &&
                isSquareOccupiedByEnemy(rightCapture, enemyOccupancies)) {
            moves.add(rightCapture);
        }

        return moves;
    }

    private boolean isSquareEmpty(int square, long allOccupancies) {
        return (allOccupancies & (1L << square)) == 0;
    }

    private boolean isSquareOccupiedByEnemy(int square, long enemyOccupancies) {
        return (enemyOccupancies & (1L << square)) != 0;
    }

    private boolean isWithinBoardBounds(int square) {
        return square >= 0 && square < 64; // Optionally, include file wrapping checks
    }


    public void movePawn(int fromSquare, int toSquare, PieceColor color) throws Exception {
        List<Integer> validMoves = generateMovesForPawn(fromSquare, color);

        if (validMoves.contains(toSquare)) {
            // Perform the move on the board
            board.getBitboard().removePieceFromSquare(fromSquare, PieceType.PAWN, color);
            board.getBitboard().placePieceOnSquare(toSquare, PieceType.PAWN, color);
            System.out.println("Move successful: Pawn moved from " + fromSquare + " to " + toSquare);
        } else {
            // If the move is not valid, throw an exception detailing the issue
            throw new Exception("Invalid move: Pawn cannot move from " + fromSquare + " to " + toSquare);
        }
    }

}
